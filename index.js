/* eslint-disable */
const TelegramApi = require('node-telegram-bot-api');
const { linkButton } = require('./buttons/linkButton.js');
const { menuButtons } = require('./buttons/menuButtons.js');
const { bucketButtons } = require('./functions/bucketButtons.js');
const func = require('./functions/createButtons');
const token = '6087753732:AAHDzs91SXPdP2xbfMz_eS5jRy-LiMccYQk';
const webAppUrl = 'https://playful-centaur-f5a6b2.netlify.app';
const { findDef } = require('./functions/findDef.js');

const { createButtons, createSingleButton } = func;
const { readFolder } = require('./server/index.js');

const bot = new TelegramApi(token, { polling: true });
bot.setMyCommands([
  { command: '/start', description: '–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã' },
  { command: '/menu', description: '–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é' },
  { command: '/help', description: '–°–ø—Ä–∞–≤–∫–∞' },
]);

const backToMenuBtn = createSingleButton('<- –ù–∞ –≥–ª–∞–≤–Ω—É—é', '/start');

const sendAllContent = async (chatId, content) => {
  if (
    !content.message.length &&
    !content.files.length &&
    !content.folders.length &&
    !content.images.length
  ) {
    await bot.sendMessage(
      chatId,
      `<strong><i>–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–∫–∞ —á—Ç–æ –ø—É—Å—Ç, –æ–∂–∏–¥–∞–π—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!</i></strong>`,
      {
        parse_mode: 'HTML',
        backToMenuBtn,
      },
    );
  }
  if (content.message) {
    for (let i = 0; i < content.message.length; i++) {
      await bot.sendMessage(chatId, `${content.message[i]}`);
    }
  }
  if (content.files) {
    for (let i = 0; i < content.files.length; i++) {
      console.log(content.files[i]);
      const linkBtn = linkButton(content.files[i].url);
      await bot.sendMessage(chatId, `${content.files[i].name.slice(1)}`, linkBtn);
    }
  }
  if (content.images) {
    try {
      for (let i = 0; i < content.images.length; i++) {
        await bot.sendPhoto(chatId, `${content.images[i]}`);
      }
    } catch (error) {
      console.log(error.message);
    }
  }
  if (content.folders && content.folders.length > 1) {
    bucketButtons(content.folders).then((res) => {
      console.log(res);
      bot.sendMessage(chatId, '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:', res);
    });
    console.log(content.folders);
  }
};

const start = async () => {
  bot.on('message', async (msg) => {
    const text = msg.text;
    const chatId = msg.chat.id;

    if (text === '/start') {
      menuButtons().then((res) => {
        bot.sendMessage(chatId, `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, ${msg.chat.username}! `, res);
      });
    }

    if (text === '/menu') {
      menuButtons()
        .then((res) => {
          bot.sendMessage(chatId, '–ú–µ–Ω—é:', res);
        })
        .catch((err) => {
          bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        });
    }

    if (text === '/flip') {
      const eagle = Math.round(Math.random());
      if (eagle) {
        bot.sendMessage(chatId, '<i>–û—Ä—ë–ª</i>', { parse_mode: 'HTML' });
      } else {
        bot.sendMessage(chatId, '<i>–†–µ—à–∫–∞</i>', { parse_mode: 'HTML' });
      }
    }
    if (text === '/help') {
      await bot.sendMessage(
        chatId,
        '–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π –ø–æ –ø—Ä–∞–∫—Ç–∏–∫–µ, —Å–æ –≤—Å–µ–º –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º –ø—Ä–∞–∫—Ç–∏–∫–∏, –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–æ–≤–∞—Ä—å —Ç–µ—Ä–º–∏–Ω–æ–≤ –∏ –∑–∞–∫—Ä–µ–ø–∏—Ç—å –∏—Ö –∏–∑—É—á–µ–Ω–∏–µ –≤ –∏–≥—Ä–æ–≤–æ–π —Ñ–æ—Ä–º–µ "–õ–∏—Å—Ç–∞–π –∏ –∑–∞–ø–æ–º–∏–Ω–∞–π", –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç—ã –ø–æ –∫–∞–∂–¥–æ–º—É —Ä–∞–∑–¥–µ–ª—É –∏ –∏—Ç–æ–≥–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.\n üíØ –ë–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —É—á–∞—â–∏–º—Å—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —É—Å–ø–µ—à–Ω–æ–π —Å–¥–∞—á–µ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —ç–∫–∑–∞–º–µ–Ω–∞, –≤—ã–ø–æ–ª–Ω–∏–≤ –≤—Å–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–Ω—è—Ç–∏—è, –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–≤ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –∏ –ø—Ä–æ–π–¥—è –≤—Å–µ –∏–º–µ—é—â–∏–µ—Å—è —Ç–µ—Å—Ç—ã.\n ‚ÑπÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç—É —Ç–µ—Ä–º–∏–Ω –∏–∑ –∫—É—Ä—Å–∞ –ø—Ä–∞–∫—Ç–∏–∫–∏, –≤ –æ—Ç–≤–µ—Ç –í–∞–º –æ—Ç–ø—Ä–∞–≤–∏—Ç –µ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ.',
      );
    }
    if (!text.includes('/')) {
      const result = findDef(text);
      await bot.sendMessage(chatId, result);
    }
    if (text.includes('/roll')) {
      if (text === '/roll') {
        return bot.sendMessage(chatId, Math.floor(Math.random() * 100) + 1);
      }
      const arr = text.split(' ');
      if (!Number(arr[1])) {
        return bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ');
      } else {
        return bot.sendMessage(chatId, Math.floor(Math.random() * Number(arr[1])) + 1);
      }
    }
  });

  bot.on('callback_query', async (msg) => {
    const data = msg.data;
    const chatId = msg.message.chat.id;

    if (data.includes('f?')) {
      const folder = data.slice(2, data.length);
      console.log(data);
      readFolder(folder)
        .then((res) => {
          sendAllContent(chatId, res);
        })
        .catch((err) => {
          console.log(err.message);
          bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        });
    }

    if (data === 'GAME') {
      await bot.sendMessage(chatId, '–ù–∞–∂–º–∏, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å', {
        reply_markup: {
          inline_keyboard: [[{ text: '–°—Ç–∞—Ä—Ç!', web_app: { url: webAppUrl } }]],
        },
      });
    }
  });
};

start();
